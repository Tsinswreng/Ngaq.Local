// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ngaq.Core.Model.Po.Word;
using Ngaq.Core.Tools;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Ngaq.Local.GeneratedInterceptors
{
    [EntityFrameworkInternal]
    public partial class Po_WordEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Ngaq.Core.Model.Po.Word.Po_Word",
                typeof(Po_Word),
                baseEntityType,
                propertyCount: 8,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Id_Word),
                propertyInfo: typeof(Po_Word).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Word).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.SetValueConverter(new ValueConverter<Id_Word, byte[]>(
                byte[] (Id_Word id) => id.Value.ToByteArr(),
                Id_Word (byte[] val) => new Id_Word(IdTool.ByteArrToUInt128(val))));
            id.SetSentinelFromProviderValue(new byte[] { 1, 150, 190, 204, 194, 252, 116, 97, 153, 87, 47, 88, 184, 103, 209, 173 });
            id.AddAnnotation("Relational:ColumnType", "BLOB");

            var createdAt = runtimeEntityType.AddProperty(
                "CreatedAt",
                typeof(long),
                propertyInfo: typeof(Po_Word).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Word).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(string),
                propertyInfo: typeof(Po_Word).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Word).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var lang = runtimeEntityType.AddProperty(
                "Lang",
                typeof(string),
                propertyInfo: typeof(Po_Word).GetProperty("Lang", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Word).GetField("<Lang>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var lastUpdatedBy = runtimeEntityType.AddProperty(
                "LastUpdatedBy",
                typeof(string),
                propertyInfo: typeof(Po_Word).GetProperty("LastUpdatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Word).GetField("<LastUpdatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var status = runtimeEntityType.AddProperty(
                "Status",
                typeof(long),
                propertyInfo: typeof(Po_Word).GetProperty("Status", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Word).GetField("<Status>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);

            var updatedAt = runtimeEntityType.AddProperty(
                "UpdatedAt",
                typeof(long?),
                propertyInfo: typeof(Po_Word).GetProperty("UpdatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Word).GetField("<UpdatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var wordFormId = runtimeEntityType.AddProperty(
                "WordFormId",
                typeof(string),
                propertyInfo: typeof(Po_Word).GetProperty("WordFormId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Word).GetField("<WordFormId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { wordFormId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { wordFormId, lang },
                unique: true);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Word");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
