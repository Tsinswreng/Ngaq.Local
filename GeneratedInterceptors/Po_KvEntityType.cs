// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ngaq.Core.Model.Po.Kv;
using Ngaq.Core.Tools;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Ngaq.Local.GeneratedInterceptors
{
    [EntityFrameworkInternal]
    public partial class Po_KvEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Ngaq.Core.Model.Po.Kv.Po_Kv",
                typeof(Po_Kv),
                baseEntityType,
                propertyCount: 18,
                unnamedIndexCount: 3,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Id_Kv),
                propertyInfo: typeof(Po_Kv).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.SetValueConverter(new ValueConverter<Id_Kv, byte[]>(
                byte[] (Id_Kv id) => id.Value.ToByteArr(),
                Id_Kv (byte[] val) => new Id_Kv(IdTool.ByteArrToUInt128(val))));
            id.SetSentinelFromProviderValue(new byte[] { 1, 150, 190, 204, 194, 182, 41, 93, 77, 213, 207, 255, 60, 117, 146, 40 });
            id.AddAnnotation("Relational:ColumnType", "BLOB");

            var createdAt = runtimeEntityType.AddProperty(
                "CreatedAt",
                typeof(long),
                propertyInfo: typeof(Po_Kv).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(string),
                propertyInfo: typeof(Po_Kv).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var kDescr = runtimeEntityType.AddProperty(
                "KDescr",
                typeof(string),
                propertyInfo: typeof(Po_Kv).GetProperty("KDescr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<KDescr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var kI64 = runtimeEntityType.AddProperty(
                "KI64",
                typeof(long),
                propertyInfo: typeof(Po_Kv).GetProperty("KI64", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<KI64>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);

            var kStr = runtimeEntityType.AddProperty(
                "KStr",
                typeof(string),
                propertyInfo: typeof(Po_Kv).GetProperty("KStr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<KStr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var kType = runtimeEntityType.AddProperty(
                "KType",
                typeof(long),
                propertyInfo: typeof(Po_Kv).GetProperty("KType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<KType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);

            var lastUpdatedBy = runtimeEntityType.AddProperty(
                "LastUpdatedBy",
                typeof(string),
                propertyInfo: typeof(Po_Kv).GetProperty("LastUpdatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<LastUpdatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var status = runtimeEntityType.AddProperty(
                "Status",
                typeof(long),
                propertyInfo: typeof(Po_Kv).GetProperty("Status", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<Status>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);

            var subjectIdType = runtimeEntityType.AddProperty(
                "SubjectIdType",
                typeof(long),
                propertyInfo: typeof(Po_Kv).GetProperty("SubjectIdType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<SubjectIdType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);

            var subjectId_Str = runtimeEntityType.AddProperty(
                "SubjectId_Str",
                typeof(string),
                propertyInfo: typeof(Po_Kv).GetProperty("SubjectId_Str", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<SubjectId_Str>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var subjectId_UInt128 = runtimeEntityType.AddProperty(
                "SubjectId_UInt128",
                typeof(UInt128?),
                propertyInfo: typeof(Po_Kv).GetProperty("SubjectId_UInt128", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<SubjectId_UInt128>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            subjectId_UInt128.SetValueConverter(new ValueConverter<UInt128?, byte[]>(
                byte[] (UInt128? id) => (id == null ? null : id.Value.ToByteArr()),
                UInt128? (byte[] val) => (val == null ? null : ((UInt128? )(IdTool.ByteArrToUInt128(val))))));
            subjectId_UInt128.AddAnnotation("Relational:ColumnType", "BLOB");

            var updatedAt = runtimeEntityType.AddProperty(
                "UpdatedAt",
                typeof(long?),
                propertyInfo: typeof(Po_Kv).GetProperty("UpdatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<UpdatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var vDescr = runtimeEntityType.AddProperty(
                "VDescr",
                typeof(string),
                propertyInfo: typeof(Po_Kv).GetProperty("VDescr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<VDescr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var vF64 = runtimeEntityType.AddProperty(
                "VF64",
                typeof(double),
                propertyInfo: typeof(Po_Kv).GetProperty("VF64", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<VF64>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);

            var vI64 = runtimeEntityType.AddProperty(
                "VI64",
                typeof(long),
                propertyInfo: typeof(Po_Kv).GetProperty("VI64", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<VI64>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);

            var vStr = runtimeEntityType.AddProperty(
                "VStr",
                typeof(string),
                propertyInfo: typeof(Po_Kv).GetProperty("VStr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<VStr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var vType = runtimeEntityType.AddProperty(
                "VType",
                typeof(long),
                propertyInfo: typeof(Po_Kv).GetProperty("VType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Po_Kv).GetField("<VType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { kI64 });

            var index0 = runtimeEntityType.AddIndex(
                new[] { kStr });

            var index1 = runtimeEntityType.AddIndex(
                new[] { subjectId_UInt128 });

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Kv");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
